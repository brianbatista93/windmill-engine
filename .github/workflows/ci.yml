name: Contiguous-Integration 

permissions:
  contents: read

on:
  push:
    branches: [ "main", "ci" ]
  pull_request:
    branches: [ "main" ]

jobs:
  check-code-format:
    name: "Code formatter"
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: DoozyX/clang-format-lint-action@v0.15
      with:
        source: "./Engine/Source"
        exclude: "./Engine/ThirdParty"
        extensions: 'hpp,cpp,mm'
        inplace: True
        clangFormatVersion: 15

    - uses: EndBug/add-and-commit@v9
      with:
        author_name: Clang Formatter
        author_email: clang@robot.com
        message: 'Committing clang-format changes'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  code-lint:
    name: "Clang lint"
    needs: check-code-format
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - uses: ZedThree/clang-tidy-review@v0.10.1
      id: review
      with:
        # CMake command to run in order to generate compile_commands.json
        cmake_command: cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DCMAKE_TOOLCHAIN_FILE="${{ github.workspace }}/Engine/Build/CMake/Toolchain/Linux-PC.cmake" .
        config_file: '.clang-tidy'
        clang_tidy_checks: 'readability-redundant-*,bugprone-*,performance-*'
        
    - if: steps.review.outputs.total_comments > 0
      run: exit 1

  build-and-test:
    needs: code-lint
    name:  >-
      CI
      ${{ matrix.os }}
      ${{ matrix.compiler }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        compiler: [msvc, gcc, clang]
        os: [windows-latest, ubuntu-latest, raspberry-pi-4, macos-latest]
        exclude:
        - os: windows-latest
          compiler: gcc   
        - os: windows-latest
          compiler: clang
        - os: macos-latest
          compiler: msvc
        - os: macos-latest
          compiler: gcc
        - os: ubuntu-latest
          compiler: msvc
        - os: raspberry-pi-4
          compiler: msvc
        - os: raspberry-pi-4
          compiler: clang
        include:
        - compiler: clang
          CC: clang
          CXX: clang++
        - compiler: msvc
          CC: cl
          CXX: cl
        - compiler: gcc
          CC: gcc
          CXX: g++
        - os: windows-latest
          CMAKE_PRESET: windows-build
          SETUP_FILE: Setup.bat
          CMAKE_GENERATOR: Visual Studio 17 2022
          TOOLCHAIN_FILE: Windows-PC.cmake
        - os: ubuntu-latest
          CMAKE_PRESET: linux-build
          SETUP_FILE: Setup.sh
          CMAKE_GENERATOR: Ninja Multi-Config
          TOOLCHAIN_FILE: Linux-PC.cmake
        - os: raspberry-pi-4
          CMAKE_PRESET: linux-build
          SETUP_FILE: Setup.sh
          CMAKE_GENERATOR: Ninja Multi-Config
          TOOLCHAIN_FILE: Linux-PC.cmake
        - os: macos-latest
          CMAKE_PRESET: macos-build
          SETUP_FILE: Setup.command
          CMAKE_GENERATOR: Xcode
          TOOLCHAIN_FILE: macOS-PC.cmake

    env:
      CMAKE_BUILD_DIR: ${{ github.workspace }}/Build
      CC: ${{ matrix.CC }}
      CXX: ${{ matrix.CXX }}
      CMAKE_C_COMPILER: ${{ matrix.CC }}
      CMAKE_CXX_COMPILER: ${{ matrix.CXX }}
      SETUP_FILE: ${{ matrix.SETUP_FILE }}
      TOOLCHAIN: ${{ github.workspace }}/Engine/Build/CMake/Toolchain/${{ matrix.TOOLCHAIN_FILE }}

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: true
        clean: true

    - name: Setup
      run: |
        ./${{ env.SETUP_FILE }}

    - name: Configuring projects
      run: >-
        cmake
        -S "${{ github.workspace }}"
        -B "${{ env.CMAKE_BUILD_DIR }}" 
        -G "${{ matrix.CMAKE_GENERATOR }}"
        -DCMAKE_TOOLCHAIN_FILE="${{ env.TOOLCHAIN }}"
        -DCMAKE_CONFIGURATION_TYPES="Debug;Profile;Release"
        -DCMAKE_INSTALL_PREFIX=${{ runner.temp }}/install_test/

    - name: Build (Debug)
      run: >-
        cmake --build "${{ env.CMAKE_BUILD_DIR }}" --config Debug

    - name: Build (Profile)
      run: >-
        cmake --build "${{ env.CMAKE_BUILD_DIR }}" --config Profile

    - name: Build (Release)
      run: >-
        cmake --build "${{ env.CMAKE_BUILD_DIR }}" --config Release